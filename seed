#! env/python/bin/python3

import yaml
import argparse
import typing
import os

class RepoDict(typing.TypedDict):
    url: str
    branch: str

class ManifestDict(typing.TypedDict):
    hub: str
    repositories: typing.List[RepoDict]

def sync_workspace(manifest: ManifestDict):
    repos = manifest["repositories"]
    for repo in repos:
        oldpwd = os.getcwd()
        os.chdir(repo)
        os.system("git fetch origin")
        os.system(f"git checkout origin/{repos[repo]['branch']}")
        os.chdir(oldpwd)

def seed_workspace(user: str, manifest: ManifestDict):
    hub_url = manifest["hub"]
    repos = manifest["repositories"]
    for repo in repos:
        repo_url = f"{hub_url}:{user}/{repos[repo]['url']}"
        print(f"Cloning repo: {repo_url}")
        os.system(f"git clone -b {repos[repo]['branch']} {repo_url}")

def main():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(dest="command")
    parser.add_argument(
        "-u",
        "--user",
        default=os.getenv("GIT_USERNAME"),
        help="Specify username from which to get repos."
    )

    parser.add_argument(
        "-m",
        "--manifest",
        default=".manifests/master.yaml",
        help="Path to manifest"
    )

    subparsers.add_parser("init", help="init workspace")
    subparsers.add_parser("sync", help="sync workspace")


    options = parser.parse_args()
    user = options.user
    manifest_path = options.manifest
    with open(manifest_path, "r") as loader:
        manifest = yaml.safe_load(loader)
    if options.command == "init":
        seed_workspace(user, manifest)

    elif options.command == "sync":
        sync_workspace(manifest)

if __name__ == "__main__":
    main()